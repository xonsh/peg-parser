[tool.ruff]
line-length = 110
extend-exclude = [
    "tests/xonsh-data",
    "tests/data",
    "pegen",
    "benchmarks",
    "tasks/bench_utils.py",
    "peg_parser/parser/untokenizer.py",
]

[tool.ruff.lint]
extend-select = [
    "B",
    "I",
    "UP",
    "C90", # mccaabe complexity
    "N",   # pep8 naming
    "YTT", # flake8-2020 sys.version
    #    "ANN", # flake8 annotations
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "FA",   # flake8-future-annotations
    "PIE",  # flake8-pie
    "PT",   # pytest
    "SIM",  # simplify
    "TCH",  # type checking
    "PL",   # pylint
    "PERF", # performance
    #    "FURB", # modernize
    "RUF", # ruff
]
extend-safe-fixes = ["FA", "TCH", "PT"]

# ruff ignore file "xonsh_parser/ply/yacc.py"
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ANN",    # requiring annotations
    "PL",     # pylint
    "PT023",  # [*] Use `@pytest.mark.xfail()` over `@pytest.mark.xfail`
    "PT001",  # [*] Use `@pytest.mark.parametrize` instead of `@pytest.mark.parametrize`
    "PT006",  # need tuple
    "PT007",  # Wrong values type in `@pytest.mark.parametrize` expected `list` of `tuple`"
    "RUF001", # similar chars
]
"peg_parser/parser.py" = [
    "A",      # flake8-builtins
    "C90",    # mccaabe complexity
    "PLR0",   # Too many arguments
    "RUF005", # concatenation
    "F841",   # [*] Local variable `strstart` is assigned to but never used
]
"tests/test_subproc_macros.py" = ["PT014"]
"tasks/generator.py" = ["N802", "PLR0913", "PLR2004", "C901"]
"*/subheader.py" = [
    "C901",
    "PLR0915", # too many statements
    "PLR0912", # Too many branches"
    "PLR0911", # Too many return statements
    "PLR0913", # Too many arguments
]
"*/tokenize.py" = [
    "A001", # Variable `any` is shadowing a Python builtin
    "F405", #
    "F821", # Undefined name `strstart`
    "F841", # [*] Local variable `strstart` is assigned to but never used
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "PLR",  # pylint
    "C901", # too complex
    "N818", # exception naming
]
"*/token.py" = [
    "N802", # function name should be lowercase
]


[tool.pytest.ini_options]
log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
addopts = "--benchmark-skip --benchmark-columns=mean,stddev,median,iqr,ops,rounds,iterations"


[tool.pdm]
[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-subtests>=0.12.1",
    "pytest-testmon>=2.1.1",
    "pytest-instafail>=0.5.0",
    "pytest-benchmark[histogram]>=4.0.0",
]
docs = ["mkdocs-material", "mkdocstrings[python]"]
profile = [
    "asv>=0.5.1",
    "virtualenv>=20.21.0",
    "pympler>=1.0.1",
    "guppy3>=3.1.2",
    "memray",
    "pytest-memray",
]
dev = [
    "flask>=3.0.3",
    "flask-wtf>=1.2.1",
    "ipython>=8.18.1",
    "setuptools>=69.5.1",
]

[build-system]
requires = ["setuptools>=64", "wheel", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
#version_file = "peg_parser/_version.py"

[project]
name = "xonsh-parser"
authors = [{ name = "xonsh-parser", email = "jnoortheen@gmail.com" }]
description = "Xonsh parser using PLY"
readme = "README.md"
dynamic = ["version"]
classifiers = ["Programming Language :: Python :: 3 :: Only"]
requires-python = ">=3.10"
dependencies = ["mypy-extensions>=1.0.0"]

[tool.setuptools.package-dir]
peg_parser = "peg_parser"
pegen = "pegen"

[project.urls]
Documentation = "https://jnoortheen.github.io/xonsh-parser/"
Source = "https://github.com/jnoortheen/xonsh-parser"

[tool.mypy]
# mypy ignore file "xonsh_parser/ply/yacc.py"
packages = "peg_parser"
exclude = ['tests', 'pegen\/build.py', 'pegen\/grammar_parser.py']
check_untyped_defs = true
ignore_missing_imports = true
follow_imports = 'skip'
strict = true

warn_unused_configs = true
warn_redundant_casts = true
warn_unreachable = true

show_error_codes = true
show_column_numbers = true
show_error_context = true
show_error_code_links = true
error_summary = true
pretty = true

disable_error_code = ["unused-ignore"]

[[tool.mypy.overrides]]
module = "peg_parser.parser"
allow_redefinition = true
local_partial_types = true
warn_unreachable = false
disable_error_code = [
    "func-returns-value", # 61
#    "var-annotated",      # 35
    "arg-type",           # 331 errors
#    "return-value",
#    "call-overload",
    "no-any-return",
]
strict = true
